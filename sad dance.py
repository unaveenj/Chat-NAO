import sys
import argparse
import time
from naoqi import ALProxy

tts = audio = record = aup = None

def main(robotIP, port):
    global tts, audio, record, aup 
  # ----------> Connect to robot <----------
    tts = ALProxy("ALTextToSpeech", robotIP, port)
    audio = ALProxy("ALAudioDevice", robotIP, port)
    record = ALProxy("ALAudioRecorder", robotIP, port)
    aup = ALProxy("ALAudioPlayer", robotIP, port)
    #aup.stopAll()
  # ----------> recording <----------
##  print 'start recording...'
##  record_path = '/home/nao/record.wav'
##  record.startMicrophonesRecording(record_path, 'wav', 16000, (0,0,1,0))
##  time.sleep(10)
##  record.stopMicrophonesRecording()
##  print 'record over'


  # ----------> playing the recorded file <----------

    print 'play sound'
    music = '/home/nao/count on me.mp3'
    fileID = aup.post.playFileFromPosition(music, 37, 1.0, 0)
    names = list()
    times = list()
    keys = list()
    

    try:
        ttsProxy = ALProxy("ALTextToSpeech",robotIP,port)
    except Exception,e:
        print("Could not create a proxy to ALTextToSpeech")

    #ttsProxy.say("...")

    names.append("HeadPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 10, 10.6, 11.2, 11.8])
    keys.append([[-0.151908, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.15651, [3, -0.166667, 0], [3, 0.2, 0]], [-0.15651, [3, -0.2, 0], [3, 0.2, 0]], [0.346642, [3, -0.2, 0], [3, 0.266667, 0]], [-0.0153821, [3, -0.266667, 0.0509405], [3, 0.266667, -0.0509405]], [-0.0663225, [3, -0.266667, 0], [3, 0.4, 0]], [-0.0567999, [3, -0.4, -0.0031388], [3, 0.2, 0.0015694]], [-0.0521979, [3, -0.2, -0.00102266], [3, 0.2, 0.00102266]], [-0.0506639, [3, -0.2, 0], [3, 0.2, 0]], [-0.0506639, [3, -0.2, 0], [3, 0.2, 0]], [-0.0506639, [3, -0.2, 0], [3, 0.233333, 0]], [-0.0506639, [3, -0.233333, 0], [3, 0.2, 0]], [-0.0506639, [3, -0.2, 0], [3, 0.2, 0]], [-0.0506639, [3, -0.2, 0], [3, 0.4, 0]], [-0.561996, [3, -0.4, 0], [3, 0.2, 0]], [0.34732, [3, -0.2, 0], [3, 0.2, 0]], [-0.561996, [3, -0.2, 0], [3, 0.2, 0]], [-0.151908, [3, -0.2, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[0.0106959, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.019984, [3, -0.166667, 0], [3, 0.2, 0]], [1.12898, [3, -0.2, 0], [3, 0.2, 0]], [0.615092, [3, -0.2, 0.1637], [3, 0.266667, -0.218266]], [-0.016916, [3, -0.266667, 0], [3, 0.266667, 0]], [1.32296, [3, -0.266667, 0], [3, 0.4, 0]], [-1.45427, [3, -0.4, 0], [3, 0.2, 0]], [-0.105888, [3, -0.2, 0], [3, 0.2, 0]], [-0.12583, [3, -0.2, 0], [3, 0.2, 0]], [-0.12583, [3, -0.2, 0], [3, 0.2, 0]], [-0.12583, [3, -0.2, 0], [3, 0.233333, 0]], [-0.12583, [3, -0.233333, 0], [3, 0.2, 0]], [-0.12583, [3, -0.2, 0], [3, 0.2, 0]], [-0.12583, [3, -0.2, 0], [3, 0.2, 0]], [-0.0418879, [3, -0.2, 0], [3, 0.2, 0]], [-0.0418879, [3, -0.2, 0], [3, 0.2, 0]], [-0.0418879, [3, -0.2, 0], [3, 0.2, 0]], [-0.0418879, [3, -0.2, 0], [3, 0.2, 0]], [0.0106959, [3, -0.2, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.082794, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.0950661, [3, -0.166667, 0], [3, 0.2, 0]], [0.0950661, [3, -0.2, 0], [3, 0.2, 0]], [0.0873961, [3, -0.2, 0], [3, 0.266667, 0]], [0.0904641, [3, -0.266667, 0], [3, 0.666667, 0]], [0.0873961, [3, -0.666667, 0.00306798], [3, 0.2, -0.000920393]], [0.078192, [3, -0.2, 0], [3, 0.2, 0]], [0.082794, [3, -0.2, 0], [3, 0.2, 0]], [0.078192, [3, -0.2, 0], [3, 0.2, 0]], [0.0827939, [3, -0.2, 0], [3, 0.233333, 0]], [0.078192, [3, -0.233333, 0], [3, 0.2, 0]], [0.0827939, [3, -0.2, 0], [3, 0.2, 0]], [0.078192, [3, -0.2, 0], [3, 1, 0]], [0.0827939, [3, -1, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[-0.115008, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.11194, [3, -0.166667, 0], [3, 0.2, 0]], [-0.11194, [3, -0.2, 0], [3, 0.2, 0]], [-0.10427, [3, -0.2, 0], [3, 0.266667, 0]], [-0.10427, [3, -0.266667, 0], [3, 0.666667, 0]], [-0.102736, [3, -0.666667, 0], [3, 0.2, 0]], [-0.102736, [3, -0.2, 0], [3, 0.2, 0]], [-0.11194, [3, -0.2, 0.00920415], [3, 0.2, -0.00920415]], [-0.322098, [3, -0.2, 0], [3, 0.2, 0]], [-0.11194, [3, -0.2, 0], [3, 0.233333, 0]], [-0.322099, [3, -0.233333, 0], [3, 0.2, 0]], [-0.11194, [3, -0.2, 0], [3, 0.2, 0]], [-0.322099, [3, -0.2, 0], [3, 1, 0]], [-0.115008, [3, -1, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[-0.397264, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.406468, [3, -0.166667, 0], [3, 0.2, 0]], [-0.052114, [3, -0.2, -0.02301], [3, 0.2, 0.02301]], [-0.029104, [3, -0.2, -0.00416371], [3, 0.266667, 0.00555161]], [-0.0229681, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.21999, [3, -0.266667, 0], [3, 0.4, 0]], [-1.20875, [3, -0.4, -0.00692824], [3, 0.2, 0.00346412]], [-1.18881, [3, -0.2, 0], [3, 0.2, 0]], [-1.26244, [3, -0.2, 0], [3, 0.2, 0]], [-1.21642, [3, -0.2, 0], [3, 0.2, 0]], [-1.26244, [3, -0.2, 0], [3, 0.233333, 0]], [-1.21642, [3, -0.233333, 0], [3, 0.2, 0]], [-1.26244, [3, -0.2, 0], [3, 0.2, 0]], [-1.21642, [3, -0.2, 0], [3, 0.2, 0]], [-1.54462, [3, -0.2, 0], [3, 0.2, 0]], [-1.54462, [3, -0.2, 0], [3, 0.2, 0]], [-1.54462, [3, -0.2, 0], [3, 0.2, 0]], [-1.54462, [3, -0.2, 0], [3, 0.2, 0]], [-0.397265, [3, -0.2, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[-1.17509, [3, -0.0333333, 0], [3, 0.166667, 0]], [-1.17355, [3, -0.166667, -0.00153398], [3, 0.2, 0.00184078]], [-0.952656, [3, -0.2, 0], [3, 0.2, 0]], [-0.978734, [3, -0.2, 0.00854663], [3, 0.266667, -0.0113955]], [-1.01248, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.00007, [3, -0.266667, -0.00265897], [3, 0.4, 0.00398846]], [-0.99254, [3, -0.4, 0], [3, 0.2, 0]], [-1.02169, [3, -0.2, 0], [3, 0.2, 0]], [-0.288434, [3, -0.2, -0.0107381], [3, 0.2, 0.0107381]], [-0.277696, [3, -0.2, 0], [3, 0.2, 0]], [-0.288435, [3, -0.2, 0], [3, 0.233333, 0]], [-0.277696, [3, -0.233333, 0], [3, 0.2, 0]], [-0.288435, [3, -0.2, 0], [3, 0.2, 0]], [-0.277696, [3, -0.2, -0.010739], [3, 0.2, 0.010739]], [0.261799, [3, -0.2, 0], [3, 0.2, 0]], [0.261799, [3, -0.2, 0], [3, 0.2, 0]], [0.261799, [3, -0.2, 0], [3, 0.2, 0]], [0.261799, [3, -0.2, 0], [3, 0.2, 0]], [-1.17509, [3, -0.2, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[0.306, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.2908, [3, -0.166667, 0], [3, 0.2, 0]], [0.9532, [3, -0.2, 0], [3, 0.2, 0]], [0.9464, [3, -0.2, 0.00291428], [3, 0.266667, -0.00388571]], [0.9328, [3, -0.266667, 0], [3, 0.666667, 0]], [0.9464, [3, -0.666667, -0.00379487], [3, 0.2, 0.00113846]], [0.9476, [3, -0.2, 0], [3, 0.2, 0]], [0.9476, [3, -0.2, 0], [3, 0.2, 0]], [0.9476, [3, -0.2, 0], [3, 0.2, 0]], [0.9476, [3, -0.2, 0], [3, 0.233333, 0]], [0.9476, [3, -0.233333, 0], [3, 0.2, 0]], [0.9476, [3, -0.2, 0], [3, 0.2, 0]], [0.9476, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0.306, [3, -0.2, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.116626, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.1335, [3, -0.166667, 0], [3, 0.2, 0]], [0.1335, [3, -0.2, 0], [3, 0.2, 0]], [-0.210116, [3, -0.2, 0.00460195], [3, 0.266667, -0.00613594]], [-0.216252, [3, -0.266667, 0], [3, 0.266667, 0]], [0.127409, [3, -0.266667, -0.0030379], [3, 0.4, 0.00455684]], [0.131966, [3, -0.4, -0.00237623], [3, 0.2, 0.00118811]], [0.138102, [3, -0.2, 0], [3, 0.2, 0]], [0.138102, [3, -0.2, 0], [3, 0.2, 0]], [-0.291418, [3, -0.2, 0], [3, 0.2, 0]], [0.138102, [3, -0.2, 0], [3, 0.233333, 0]], [-0.291418, [3, -0.233333, 0], [3, 0.2, 0]], [0.138102, [3, -0.2, 0], [3, 0.2, 0]], [-0.291418, [3, -0.2, 0], [3, 1, 0]], [0.116626, [3, -1, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.9, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.165714, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.214802, [3, -0.166667, 0], [3, 0.2, 0]], [0.214802, [3, -0.2, 0], [3, 0.2, 0]], [0.204064, [3, -0.2, 0], [3, 0.266667, 0]], [0.216336, [3, -0.266667, 0], [3, 0.466667, 0]], [0.0959931, [3, -0.466667, 0.0198638], [3, 0.2, -0.00851304]], [0.0874801, [3, -0.2, 0], [3, 0.2, 0]], [0.093616, [3, -0.2, 0], [3, 0.2, 0]], [0.0598679, [3, -0.2, 0], [3, 0.2, 0]], [0.237812, [3, -0.2, 0], [3, 0.2, 0]], [0.0598679, [3, -0.2, 0], [3, 0.233333, 0]], [0.237812, [3, -0.233333, 0], [3, 0.2, 0]], [0.0598679, [3, -0.2, 0], [3, 0.2, 0]], [0.237812, [3, -0.2, 0], [3, 1, 0]], [0.165714, [3, -1, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[-0.168698, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.168698, [3, -0.166667, 0], [3, 0.2, 0]], [-0.168698, [3, -0.2, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.266667, 0]], [-0.170232, [3, -0.266667, 0], [3, 0.666667, 0]], [-0.167164, [3, -0.666667, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.2, 0]], [-0.148756, [3, -0.2, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.233333, 0]], [-0.148756, [3, -0.233333, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.2, 0]], [-0.148756, [3, -0.2, 0], [3, 1, 0]], [-0.168698, [3, -1, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[-0.104354, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.0874801, [3, -0.166667, 0], [3, 0.2, 0]], [-0.0874801, [3, -0.2, 0], [3, 0.2, 0]], [0.182504, [3, -0.2, 0], [3, 0.266667, 0]], [0.18097, [3, -0.266667, 0.00153398], [3, 0.266667, -0.00153398]], [-0.0925025, [3, -0.266667, 0.00176503], [3, 0.4, -0.00264754]], [-0.09515, [3, -0.4, 0.000929229], [3, 0.2, -0.000464614]], [-0.096684, [3, -0.2, 0], [3, 0.2, 0]], [-0.0890141, [3, -0.2, -0.00766993], [3, 0.2, 0.00766993]], [0.222388, [3, -0.2, 0], [3, 0.2, 0]], [-0.0890141, [3, -0.2, 0], [3, 0.233333, 0]], [0.222388, [3, -0.233333, 0], [3, 0.2, 0]], [-0.0890141, [3, -0.2, 0], [3, 0.2, 0]], [0.222388, [3, -0.2, 0], [3, 1, 0]], [-0.104354, [3, -1, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[1.42811, [3, -0.0333333, 0], [3, 0.166667, 0]], [1.43425, [3, -0.166667, 0], [3, 0.2, 0]], [1.42658, [3, -0.2, 0.00767004], [3, 0.2, -0.00767004]], [0.28068, [3, -0.2, 0.209501], [3, 0.266667, -0.279334]], [-0.0399261, [3, -0.266667, 0.202696], [3, 0.266667, -0.202696]], [-0.935496, [3, -0.266667, 0], [3, 0.4, 0]], [-0.90817, [3, -0.4, -0.0273267], [3, 0.2, 0.0136633]], [0.079726, [3, -0.2, -0.30501], [3, 0.2, 0.30501]], [0.921892, [3, -0.2, -0.0107379], [3, 0.2, 0.0107379]], [0.93263, [3, -0.2, 0], [3, 0.2, 0]], [0.921892, [3, -0.2, 0], [3, 0.233333, 0]], [0.932631, [3, -0.233333, 0], [3, 0.2, 0]], [0.921892, [3, -0.2, 0], [3, 0.2, 0]], [0.932631, [3, -0.2, -0.010739], [3, 0.2, 0.010739]], [1.24966, [3, -0.2, 0], [3, 0.2, 0]], [1.24966, [3, -0.2, 0], [3, 0.2, 0]], [1.24966, [3, -0.2, 0], [3, 0.2, 0]], [1.24966, [3, -0.2, 0], [3, 0.2, 0]], [1.42811, [3, -0.2, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[0.208582, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.19631, [3, -0.166667, 0], [3, 0.2, 0]], [1.32645, [3, -0.2, 0], [3, 0.2, 0]], [0.538392, [3, -0.2, 0.187307], [3, 0.266667, -0.249743]], [0.0152981, [3, -0.266667, 0], [3, 0.266667, 0]], [1.32645, [3, -0.266667, 0], [3, 0.4, 0]], [1.24403, [3, -0.4, 0.0824182], [3, 0.2, -0.0412091]], [-0.161112, [3, -0.2, 0], [3, 0.2, 0]], [0.02757, [3, -0.2, -0.0447417], [3, 0.2, 0.0447417]], [0.107338, [3, -0.2, 0], [3, 0.2, 0]], [0.0275701, [3, -0.2, 0], [3, 0.233333, 0]], [0.107338, [3, -0.233333, 0], [3, 0.2, 0]], [0.0275701, [3, -0.2, 0], [3, 0.2, 0]], [0.107338, [3, -0.2, -0.0797678], [3, 0.2, 0.0797678]], [0.736529, [3, -0.2, 0], [3, 0.2, 0]], [0.736529, [3, -0.2, 0], [3, 0.2, 0]], [0.736529, [3, -0.2, 0], [3, 0.2, 0]], [0.736529, [3, -0.2, 0], [3, 0.2, 0]], [0.208583, [3, -0.2, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[0.075124, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.110406, [3, -0.166667, 0], [3, 0.2, 0]], [-0.372804, [3, -0.2, 0], [3, 0.2, 0]], [-0.346726, [3, -0.2, -0.00701257], [3, 0.266667, 0.0093501]], [-0.323716, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.40848, [3, -0.266667, 0], [3, 0.4, 0]], [-1.3699, [3, -0.4, -0.0385767], [3, 0.2, 0.0192883]], [-0.108956, [3, -0.2, 0], [3, 0.2, 0]], [-0.665798, [3, -0.2, 0.050622], [3, 0.2, -0.050622]], [-0.71642, [3, -0.2, 0], [3, 0.2, 0]], [-0.665798, [3, -0.2, 0], [3, 0.233333, 0]], [-0.716419, [3, -0.233333, 0], [3, 0.2, 0]], [-0.665798, [3, -0.2, 0], [3, 0.2, 0]], [-0.716419, [3, -0.2, 0.0506215], [3, 0.2, -0.0506215]], [-1.44513, [3, -0.2, 0], [3, 0.2, 0]], [-1.44513, [3, -0.2, 0], [3, 0.2, 0]], [-1.44513, [3, -0.2, 0], [3, 0.2, 0]], [-1.44513, [3, -0.2, 0], [3, 0.2, 0]], [0.075124, [3, -0.2, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.0828779, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.09515, [3, -0.166667, 0], [3, 0.2, 0]], [0.09515, [3, -0.2, 0], [3, 0.2, 0]], [0.0844119, [3, -0.2, 0.00241058], [3, 0.266667, -0.00321411]], [0.0782759, [3, -0.266667, 0], [3, 0.666667, 0]], [0.0874801, [3, -0.666667, 0], [3, 0.2, 0]], [0.0767419, [3, -0.2, 0.00255668], [3, 0.2, -0.00255668]], [0.07214, [3, -0.2, 0], [3, 0.2, 0]], [0.07214, [3, -0.2, 0], [3, 0.2, 0]], [0.07214, [3, -0.2, 0], [3, 0.233333, 0]], [0.07214, [3, -0.233333, 0], [3, 0.2, 0]], [0.07214, [3, -0.2, 0], [3, 0.2, 0]], [0.07214, [3, -0.2, 0], [3, 1, 0]], [0.0828778, [3, -1, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.112024, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.113558, [3, -0.166667, 0], [3, 0.2, 0]], [0.113558, [3, -0.2, 0], [3, 0.2, 0]], [0.113558, [3, -0.2, 0], [3, 0.266667, 0]], [0.112024, [3, -0.266667, 0], [3, 0.666667, 0]], [0.113558, [3, -0.666667, -0.00117999], [3, 0.2, 0.000353996]], [0.116626, [3, -0.2, 0], [3, 0.2, 0]], [0.116626, [3, -0.2, 0], [3, 0.2, 0]], [0.32525, [3, -0.2, 0], [3, 0.2, 0]], [0.116626, [3, -0.2, 0], [3, 0.233333, 0]], [0.325249, [3, -0.233333, 0], [3, 0.2, 0]], [0.116626, [3, -0.2, 0], [3, 0.2, 0]], [0.325249, [3, -0.2, 0], [3, 1, 0]], [0.112024, [3, -1, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[0.42496, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.40962, [3, -0.166667, 0], [3, 0.2, 0]], [1.4374, [3, -0.2, 0], [3, 0.2, 0]], [1.39905, [3, -0.2, 0.00898484], [3, 0.266667, -0.0119798]], [1.37451, [3, -0.266667, 0.0176775], [3, 0.666667, -0.0441937]], [1.21344, [3, -0.666667, 0.0452334], [3, 0.2, -0.01357]], [1.1981, [3, -0.2, 0], [3, 0.2, 0]], [1.30548, [3, -0.2, 0], [3, 0.2, 0]], [1.26252, [3, -0.2, 0], [3, 0.2, 0]], [1.30548, [3, -0.2, 0], [3, 0.233333, 0]], [1.26252, [3, -0.233333, 0], [3, 0.2, 0]], [1.30548, [3, -0.2, 0], [3, 0.2, 0]], [1.26252, [3, -0.2, 0], [3, 0.2, 0]], [1.50447, [3, -0.2, 0], [3, 0.2, 0]], [1.50447, [3, -0.2, 0], [3, 0.2, 0]], [1.50447, [3, -0.2, 0], [3, 0.2, 0]], [1.50447, [3, -0.2, 0], [3, 0.2, 0]], [0.42496, [3, -0.2, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[1.175, [3, -0.0333333, 0], [3, 0.166667, 0]], [1.1796, [3, -0.166667, 0], [3, 0.2, 0]], [0.363516, [3, -0.2, 0], [3, 0.2, 0]], [0.406468, [3, -0.2, -0.0124911], [3, 0.266667, 0.0166548]], [0.450954, [3, -0.266667, -0.0189924], [3, 0.666667, 0.0474809]], [0.605888, [3, -0.666667, -0.154934], [3, 0.2, 0.0464802]], [1.1029, [3, -0.2, 0], [3, 0.2, 0]], [0.139552, [3, -0.2, 0.0107381], [3, 0.2, -0.0107381]], [0.128814, [3, -0.2, 0], [3, 0.2, 0]], [0.139552, [3, -0.2, 0], [3, 0.233333, 0]], [0.128814, [3, -0.233333, 0], [3, 0.2, 0]], [0.139552, [3, -0.2, 0], [3, 0.2, 0]], [0.128814, [3, -0.2, 0.0107381], [3, 0.2, -0.0107381]], [-0.488692, [3, -0.2, 0], [3, 0.2, 0]], [-0.488692, [3, -0.2, 0], [3, 0.2, 0]], [-0.488692, [3, -0.2, 0], [3, 0.2, 0]], [-0.488692, [3, -0.2, 0], [3, 0.2, 0]], [1.175, [3, -0.2, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[0.304, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.2884, [3, -0.166667, 0], [3, 0.2, 0]], [0.7392, [3, -0.2, 0], [3, 0.2, 0]], [0.7248, [3, -0.2, 0.00354286], [3, 0.266667, -0.00472381]], [0.7144, [3, -0.266667, 0], [3, 0.666667, 0]], [0.732, [3, -0.666667, 0], [3, 0.2, 0]], [0.726, [3, -0.2, 0.00119996], [3, 0.2, -0.00119996]], [0.7248, [3, -0.2, 0], [3, 0.2, 0]], [0.7248, [3, -0.2, 0], [3, 0.2, 0]], [0.7248, [3, -0.2, 0], [3, 0.233333, 0]], [0.7248, [3, -0.233333, 0], [3, 0.2, 0]], [0.7248, [3, -0.2, 0], [3, 0.2, 0]], [0.7248, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0, [3, -0.2, 0], [3, 0.2, 0]], [0.304, [3, -0.2, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.118076, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.12728, [3, -0.166667, 0], [3, 0.2, 0]], [0.12728, [3, -0.2, 0], [3, 0.2, 0]], [-0.219404, [3, -0.2, 0.00460197], [3, 0.266667, -0.00613596]], [-0.22554, [3, -0.266667, 0], [3, 0.266667, 0]], [0.127409, [3, -0.266667, -0.00400461], [3, 0.4, 0.00600691]], [0.133416, [3, -0.4, -0.00201669], [3, 0.2, 0.00100835]], [0.136484, [3, -0.2, 0], [3, 0.2, 0]], [0.13495, [3, -0.2, 0.00153399], [3, 0.2, -0.00153399]], [-0.291502, [3, -0.2, 0], [3, 0.2, 0]], [0.13495, [3, -0.2, 0], [3, 0.233333, 0]], [-0.291501, [3, -0.233333, 0], [3, 0.2, 0]], [0.13495, [3, -0.2, 0], [3, 0.2, 0]], [-0.291501, [3, -0.2, 0], [3, 1, 0]], [0.118076, [3, -1, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.9, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[-0.147222, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.397264, [3, -0.166667, 0], [3, 0.2, 0]], [-0.397264, [3, -0.2, 0], [3, 0.2, 0]], [-0.389594, [3, -0.2, 0], [3, 0.266667, 0]], [-0.391128, [3, -0.266667, 0], [3, 0.466667, 0]], [-0.0959931, [3, -0.466667, -0.0200596], [3, 0.2, 0.00859697]], [-0.0873961, [3, -0.2, 0], [3, 0.2, 0]], [-0.0873961, [3, -0.2, 0], [3, 0.2, 0]], [-0.0705221, [3, -0.2, 0], [3, 0.2, 0]], [-0.236194, [3, -0.2, 0], [3, 0.2, 0]], [-0.0705221, [3, -0.2, 0], [3, 0.233333, 0]], [-0.236194, [3, -0.233333, 0], [3, 0.2, 0]], [-0.0705221, [3, -0.2, 0], [3, 0.2, 0]], [-0.236194, [3, -0.2, 0], [3, 1, 0]], [-0.147222, [3, -1, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[-0.168698, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.168698, [3, -0.166667, 0], [3, 0.2, 0]], [-0.168698, [3, -0.2, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.266667, 0]], [-0.170232, [3, -0.266667, 0], [3, 0.666667, 0]], [-0.167164, [3, -0.666667, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.2, 0]], [-0.148756, [3, -0.2, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.233333, 0]], [-0.148756, [3, -0.233333, 0], [3, 0.2, 0]], [-0.167164, [3, -0.2, 0], [3, 0.2, 0]], [-0.148756, [3, -0.2, 0], [3, 1, 0]], [-0.168698, [3, -1, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 3.3, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[-0.10427, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.099668, [3, -0.166667, 0], [3, 0.2, 0]], [-0.099668, [3, -0.2, 0], [3, 0.2, 0]], [0.17952, [3, -0.2, -0.00115049], [3, 0.266667, 0.00153398]], [0.181054, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.0925025, [3, -0.266667, 0.000686424], [3, 0.4, -0.00102964]], [-0.0935321, [3, -0.4, 0.000910579], [3, 0.2, -0.00045529]], [-0.0966001, [3, -0.2, 0], [3, 0.2, 0]], [-0.0950661, [3, -0.2, -0.00153399], [3, 0.2, 0.00153399]], [0.216336, [3, -0.2, 0], [3, 0.2, 0]], [-0.095066, [3, -0.2, 0], [3, 0.233333, 0]], [0.216335, [3, -0.233333, 0], [3, 0.2, 0]], [-0.095066, [3, -0.2, 0], [3, 0.2, 0]], [0.216335, [3, -0.2, 0], [3, 1, 0]], [-0.10427, [3, -1, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[1.46808, [3, -0.0333333, 0], [3, 0.166667, 0]], [1.43433, [3, -0.166667, 0], [3, 0.2, 0]], [1.52791, [3, -0.2, 0], [3, 0.2, 0]], [1.48035, [3, -0.2, 0.00920398], [3, 0.266667, -0.012272]], [1.46348, [3, -0.266667, 0.0168738], [3, 0.666667, -0.0421845]], [-1.05995, [3, -0.666667, 0], [3, 0.2, 0]], [0.04146, [3, -0.2, -0.073632], [3, 0.2, 0.073632]], [0.115092, [3, -0.2, -0.0107379], [3, 0.2, 0.0107379]], [0.12583, [3, -0.2, 0], [3, 0.2, 0]], [0.115092, [3, -0.2, 0], [3, 0.233333, 0]], [0.12583, [3, -0.233333, 0], [3, 0.2, 0]], [0.115092, [3, -0.2, 0], [3, 0.2, 0]], [0.12583, [3, -0.2, -0.0107378], [3, 0.2, 0.0107378]], [1.09258, [3, -0.2, 0], [3, 0.2, 0]], [1.09258, [3, -0.2, 0], [3, 0.2, 0]], [1.09258, [3, -0.2, 0], [3, 0.2, 0]], [1.09258, [3, -0.2, 0], [3, 0.2, 0]], [1.46808, [3, -0.2, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 9.4, 10, 10.6, 11.2, 11.8])
    keys.append([[-0.208666, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.208666, [3, -0.166667, 0], [3, 0.2, 0]], [-0.77011, [3, -0.2, 0], [3, 0.2, 0]], [-0.767042, [3, -0.2, -0.00241055], [3, 0.266667, 0.00321407]], [-0.753236, [3, -0.266667, 0], [3, 0.666667, 0]], [-1.17815, [3, -0.666667, 0], [3, 0.2, 0]], [0.193242, [3, -0.2, 0], [3, 0.2, 0]], [0.168698, [3, -0.2, 0], [3, 0.2, 0]], [0.177902, [3, -0.2, 0], [3, 0.2, 0]], [0.168698, [3, -0.2, 0], [3, 0.233333, 0]], [0.177901, [3, -0.233333, 0], [3, 0.2, 0]], [0.168698, [3, -0.2, 0], [3, 0.2, 0]], [0.177901, [3, -0.2, 0], [3, 0.2, 0]], [-0.747001, [3, -0.2, 0], [3, 0.2, 0]], [-0.747001, [3, -0.2, 0], [3, 0.2, 0]], [-0.747001, [3, -0.2, 0], [3, 0.2, 0]], [-0.747001, [3, -0.2, 0], [3, 0.2, 0]], [-0.208666, [3, -0.2, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0, 0.5, 1.1, 1.7, 2.5, 4.5, 5.1, 5.7, 6.3, 6.9, 7.6, 8.2, 8.8, 11.8])
    keys.append([[0.099668, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.0689881, [3, -0.166667, 0], [3, 0.2, 0]], [0.116542, [3, -0.2, 0], [3, 0.2, 0]], [0.098134, [3, -0.2, 0], [3, 0.266667, 0]], [0.105804, [3, -0.266667, -0.00766993], [3, 0.666667, 0.0191748]], [1.63367, [3, -0.666667, 0], [3, 0.2, 0]], [0.10427, [3, -0.2, 0], [3, 0.2, 0]], [0.981718, [3, -0.2, 0], [3, 0.2, 0]], [0.981718, [3, -0.2, 0], [3, 0.2, 0]], [0.981718, [3, -0.2, 0], [3, 0.233333, 0]], [0.981718, [3, -0.233333, 0], [3, 0.2, 0]], [0.981718, [3, -0.2, 0], [3, 0.2, 0]], [0.981718, [3, -0.2, 0], [3, 1, 0]], [0.0996681, [3, -1, 0], [3, 0, 0]]])

    try:
      motion = ALProxy("ALMotion",robotIP,port)
      motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
      print err

    aup.stopAll()
    
if __name__ == "__main__":

    robotIP = "192.168.210.156"#"192.168.11.3"

    port = 9559 #9559 # Insert NAO port


    if len(sys.argv) <= 1:
        print "(robotIP default: 127.0.0.1)"
    elif len(sys.argv) <= 2:
        robotIP = sys.argv[1]
    else:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    main(robotIP, port)
